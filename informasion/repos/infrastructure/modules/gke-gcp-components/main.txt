####################
# VPC & Networking #
####################

module "vpc" {
  source  = "terraform-google-modules/network/google"
  version = "~> 10.0"

  project_id   = var.project_id
  network_name = var.name_prefix

  subnets = [
    {
      subnet_name           = "${var.name_prefix}-01"
      subnet_ip             = "10.10.10.0/24"
      subnet_private_access = "true"
      subnet_region         = var.region
      subnet_flow_logs      = "true"
    },
    {
      subnet_name           = "${var.name_prefix}-02"
      subnet_ip             = "10.10.11.0/24"
      subnet_private_access = "true"
      subnet_region         = var.region
      subnet_flow_logs      = "true"
    },
  ]

  secondary_ranges = {
    "${var.name_prefix}-01" = [
      {
        range_name    = "services-range"
        ip_cidr_range = "10.1.0.0/16"
      },
      {
        range_name    = "pod-range"
        ip_cidr_range = "10.2.0.0/20"
      },
    ]
  }


  routes = [
    {
      name              = "egress-internet"
      description       = "route through IGW to access internet"
      destination_range = "0.0.0.0/0"
      tags              = "egress-inet"
      next_hop_internet = "true"
    }
  ]
}

resource "google_compute_global_address" "default" {
  name          = "private-ip-address"
  purpose       = "VPC_PEERING"
  address_type  = "INTERNAL"
  prefix_length = 16
  network       = module.vpc.network_self_link
  project       = var.project_id
}

resource "google_service_networking_connection" "default" {
  network                 = module.vpc.network_self_link
  service                 = "servicenetworking.googleapis.com"
  reserved_peering_ranges = [google_compute_global_address.default.name]
}

resource "google_compute_router" "router" {
  project = var.project_id
  name    = "nat-router"
  network = module.vpc.network_self_link
  region  = var.region
}

module "cloud_nat" {
  source  = "terraform-google-modules/cloud-nat/google"
  version = "~> 5.0"

  project_id                         = var.project_id
  region                             = var.region
  router                             = google_compute_router.router.name
  name                               = "nat-config"
  source_subnetwork_ip_ranges_to_nat = "ALL_SUBNETWORKS_ALL_IP_RANGES"
}

##############
# openvpn vm #
##############

# I don't think we need this now - we should switch it go Tailscale instead of OpenVPN

# data "google_compute_subnetwork" "subnetwork" {
#   name       = "${var.name_prefix}-01"
#   project    = var.project_id
#   region     = var.region
#   depends_on = [module.vpc]
# }
#
# module "gcp-vpn-vm" {
#   source = "../gcp-vpn-vm"
#
#   project_id   = var.project_id
#   network_name = module.vpc.network_name
#   environment  = var.environment
#   subnetwork   = data.google_compute_subnetwork.subnetwork.self_link
#   ssh_keys     = var.ssh_keys
#
#   depends_on = [module.vpc]
# }

##############
# Kubernetes #
##############

module "gke" {
  source  = "terraform-google-modules/kubernetes-engine/google"
  version = "~> 36.0"

  project_id = var.project_id
  name       = var.name_prefix
  network    = module.vpc.network_name
  subnetwork = "${var.name_prefix}-01"

  # Switching cluster from multi-zone to single-zone
  # region = var.region
  # zones  = ["${var.region}-a", "${var.region}-b", "${var.region}-c"]
  region = var.region
  zones  = ["${var.region}-a"]

  # kubernetes_version         = "1.32.2-gke.1182000"
  ip_range_pods              = "pod-range"
  ip_range_services          = "services-range"
  grant_registry_access      = true
  registry_project_ids       = [var.project_id]
  default_max_pods_per_node  = 55
  deletion_protection        = false
  remove_default_node_pool   = true
  initial_node_count         = 1
  gcs_fuse_csi_driver        = true             # We want to connect to GCS directly

  node_pools = [
    {
      name               = "default-node-pool"
      machine_type       = "e2-standard-2"
      node_locations     = "${var.region}-a"
      min_count          = 0 // Scale to 1 when ready
      max_count          = 2 // Scale to 1 when ready
      spot               = false
      disk_size_gb       = 20
      disk_type          = "pd-standard"
      auto_repair        = true
      auto_upgrade       = true
      preemptible        = false
      enable_secure_boot = true
    },
    {
      name                     = "gpu-node"
      machine_type             = "n1-standard-4"
      node_locations           = "${var.region}-a"
      min_count                = 0
      max_count                = 1
      spot                     = false
      disk_size_gb             = 40
      disk_type                = "pd-balanced"
      auto_repair              = true
      auto_upgrade             = true
      preemptible              = false
      enable_secure_boot       = true
      accelerator_count        = 1
      accelerator_type         = "nvidia-tesla-p4"
      consume_reservation_type = "NO_RESERVATION"
      queued_provisioning      = true
    }
  ]

  node_pools_oauth_scopes = {
    all = [
      "https://www.googleapis.com/auth/logging.write",
      "https://www.googleapis.com/auth/monitoring",
      "https://www.googleapis.com/auth/cloud-platform",
    ]
  }

  node_pools_metadata = {
    all = {
      block-project-ssh-keys = true
    }
  }

  cluster_resource_labels = {
    environment = var.environment
  }
}
