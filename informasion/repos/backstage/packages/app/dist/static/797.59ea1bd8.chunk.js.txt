{"version":3,"file":"static/797.59ea1bd8.chunk.js","mappings":"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","sources":["webpack://app/../../node_modules/@roadiehq/backstage-plugin-argo-cd/dist/components/ArgoCDHistoryTable.esm.js","webpack://app/../../node_modules/@roadiehq/backstage-plugin-argo-cd/dist/components/ArgoCDHistoryCard.esm.js"],"sourcesContent":["import { Table } from '@backstage/core-components';\nimport { useApi, configApiRef } from '@backstage/core-plugin-api';\nimport { Link, List, ListItem } from '@material-ui/core';\nimport React from 'react';\nimport SyncIcon from '@material-ui/icons/Sync';\nimport { DateTime } from 'luxon';\n\nconst ArgoCDHistoryTable = ({\n  data,\n  retry\n}) => {\n  const configApi = useApi(configApiRef);\n  const namespaced = configApi.getOptionalBoolean(\"argocd.namespacedApps\") ?? false;\n  const baseUrl = configApi.getOptionalString(\"argocd.baseUrl\");\n  const supportsMultipleArgoInstances = Boolean(\n    configApi.getOptionalConfigArray(\"argocd.appLocatorMethods\")?.length\n  );\n  const linkUrl = (row) => {\n    if (supportsMultipleArgoInstances && !baseUrl) {\n      const instanceConfig = configApi.getConfigArray(\"argocd.appLocatorMethods\").find((value) => value.getOptionalString(\"type\") === \"config\")?.getOptionalConfigArray(\"instances\")?.find((value) => value.getOptionalString(\"name\") === row?.instance);\n      return instanceConfig?.getOptionalString(\"frontendUrl\") ?? instanceConfig?.getOptionalString(\"url\");\n    }\n    return baseUrl;\n  };\n  const columns = [\n    {\n      title: \"Name\",\n      field: \"name\",\n      render: (row) => linkUrl ? /* @__PURE__ */ React.createElement(\n        Link,\n        {\n          href: `${linkUrl(row)}/applications/${namespaced ? `${row.appNamespace}/${row.app}` : row.app}`,\n          target: \"_blank\",\n          rel: \"noopener\"\n        },\n        row.app\n      ) : row.app\n    },\n    {\n      title: \"Deploy Details\",\n      defaultSort: \"desc\",\n      field: \"deployedAt\",\n      render: (row) => /* @__PURE__ */ React.createElement(List, { dense: true, style: { padding: \"0px\" } }, /* @__PURE__ */ React.createElement(ListItem, { style: { paddingLeft: \"0px\" } }, row.deployedAt ? `Deployed at ${DateTime.fromISO(row.deployedAt).toLocal().toFormat(\"dd MMM yyyy, HH:mm:ss\")}` : null), /* @__PURE__ */ React.createElement(ListItem, { style: { paddingLeft: \"0px\" } }, row.deployStartedAt ? `Run ${DateTime.fromISO(row.deployStartedAt).toLocal().toRelative()}` : null), /* @__PURE__ */ React.createElement(ListItem, { style: { paddingLeft: \"0px\" } }, row.deployedAt && row.deployStartedAt ? `Took ${DateTime.fromISO(row.deployStartedAt).diff(DateTime.fromISO(row.deployedAt)).toFormat(\"hh:mm:ss\")}` : null))\n    },\n    {\n      title: \"Author\",\n      field: \"revisionDetails.author\",\n      render: (row) => /* @__PURE__ */ React.createElement(\"div\", null, row.revisionDetails?.author || \"Loading...\")\n    },\n    {\n      title: \"Message\",\n      field: \"revisionDetails.message\",\n      render: (row) => /* @__PURE__ */ React.createElement(\"div\", null, row.revisionDetails?.message || \"Loading...\")\n    },\n    {\n      title: \"Revision\",\n      field: \"revision\",\n      render: (row) => /* @__PURE__ */ React.createElement(\"div\", null, row.revision)\n    }\n  ];\n  if (supportsMultipleArgoInstances) {\n    columns.splice(1, 0, {\n      title: \"Instance\",\n      field: \"instance\",\n      render: (row) => row.metadata?.instance?.name ? row.metadata?.instance?.name : row.instance\n    });\n  }\n  return /* @__PURE__ */ React.createElement(\n    Table,\n    {\n      title: \"ArgoCD history\",\n      options: {\n        paging: true,\n        search: false,\n        draggable: false,\n        padding: \"dense\"\n      },\n      data,\n      columns,\n      actions: [\n        {\n          icon: () => /* @__PURE__ */ React.createElement(SyncIcon, null),\n          tooltip: \"Refresh\",\n          isFreeAction: true,\n          onClick: () => retry()\n        }\n      ]\n    }\n  );\n};\n\nexport { ArgoCDHistoryTable };\n//# sourceMappingURL=ArgoCDHistoryTable.esm.js.map\n","import { ErrorBoundary, InfoCard } from '@backstage/core-components';\nimport { useApi, configApiRef } from '@backstage/core-plugin-api';\nimport { useEntity, MissingAnnotationEmptyState } from '@backstage/plugin-catalog-react';\nimport { LinearProgress } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport { isArgocdAvailable } from '../conditions.esm.js';\nimport { useAppDetails } from './useAppDetails.esm.js';\nimport { ARGOCD_ANNOTATION_APP_NAME, useArgoCDAppData } from './useArgoCDAppData.esm.js';\nimport { argoCDApiRef } from '../api/index.esm.js';\nimport { ArgoCDHistoryTable } from './ArgoCDHistoryTable.esm.js';\n\nconst isHelmChart = (row) => {\n  return row.source?.chart !== void 0;\n};\nconst getRevisionId = (row) => {\n  if (row.revision.hasOwnProperty(\"revisionID\")) {\n    return row.revision.revisionID;\n  }\n  return row.revision;\n};\nconst withRevisionDetails = async (api, url, row) => {\n  if (isHelmChart(row)) {\n    row.revisionDetails = { author: \"n/a\", message: \"n/a\", date: \"n/a\" };\n    return row;\n  }\n  row.revisionDetails = await api.getRevisionDetails({\n    url,\n    app: row.app,\n    appNamespace: row.appNamespace,\n    revisionID: getRevisionId(row),\n    instanceName: row.instance\n  });\n  return row;\n};\nconst ArgoCDHistory = ({ entity }) => {\n  const [tableRows, setTableRows] = useState([]);\n  const argoCDApi = useApi(argoCDApiRef);\n  const { url, appName, appSelector, appNamespace, projectName } = useArgoCDAppData({ entity });\n  const { loading, value, error, retry } = useAppDetails({\n    url,\n    appName,\n    appSelector,\n    appNamespace,\n    projectName\n  });\n  const revisionsToLoad = useApi(configApiRef).getOptionalNumber(\"argocd.revisionsToLoad\") || -1;\n  useEffect(() => {\n    if (!value) {\n      return;\n    }\n    let apps;\n    if (value.items !== void 0) {\n      apps = value.items ?? [];\n    } else if (Array.isArray(value)) {\n      apps = value;\n    } else {\n      apps = [value];\n    }\n    const revisions = apps.filter((app) => app?.status?.history).flatMap((app) => {\n      return app.status.history.sort(\n        (a, b) => new Date(b.deployedAt || \"\").valueOf() - new Date(a.deployedAt || \"\").valueOf()\n      ).slice(0, revisionsToLoad).map((entry) => ({\n        key: `${app.metadata.name}-${entry.revision}`,\n        app: app.metadata.name,\n        appNamespace: app.metadata.namespace,\n        instance: app.metadata?.instance?.name,\n        ...entry\n      }));\n    });\n    setTableRows(revisions);\n    Promise.all(\n      revisions.map(\n        async (row) => await withRevisionDetails(argoCDApi, url, row)\n      )\n    ).then((rowsWithRevisions) => {\n      setTableRows(rowsWithRevisions.filter((row) => row));\n    });\n  }, [value, argoCDApi, url, revisionsToLoad]);\n  if (loading) {\n    return /* @__PURE__ */ React.createElement(InfoCard, { title: \"ArgoCD history\" }, /* @__PURE__ */ React.createElement(LinearProgress, null));\n  }\n  if (error) {\n    return /* @__PURE__ */ React.createElement(InfoCard, { title: \"ArgoCD history\" }, \"Error occurred while fetching data. \", error.message);\n  }\n  if (tableRows.length) {\n    return /* @__PURE__ */ React.createElement(ArgoCDHistoryTable, { data: tableRows, retry });\n  }\n  return null;\n};\nconst ArgoCDHistoryCard = () => {\n  const { entity } = useEntity();\n  return !isArgocdAvailable(entity) ? /* @__PURE__ */ React.createElement(MissingAnnotationEmptyState, { annotation: ARGOCD_ANNOTATION_APP_NAME }) : /* @__PURE__ */ React.createElement(ErrorBoundary, null, /* @__PURE__ */ React.createElement(ArgoCDHistory, { entity }));\n};\n\nexport { ArgoCDHistoryCard };\n//# sourceMappingURL=ArgoCDHistoryCard.esm.js.map\n"],"names":["ArgoCDHistoryTable","data","retry","configApi","namespaced","baseUrl","supportsMultipleArgoInstances","linkUrl","row","instanceConfig","value","columns","Link","List","ListItem","Sync","isHelmChart","getRevisionId","withRevisionDetails","api","url","ArgoCDHistory","entity","tableRows","setTableRows","argoCDApi","appName","appSelector","appNamespace","projectName","loading","error","revisionsToLoad","apps","revisions","app","a","b","entry","rowsWithRevisions","LinearProgress","ArgoCDHistoryCard"],"sourceRoot":""}