{"version":3,"file":"static/module-micromark-core-commonmark.19d1ef56.js","mappings":"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","sources":["webpack://app/../../node_modules/micromark-core-commonmark/lib/content.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/list.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/label-end.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/autolink.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/code-text.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/attention.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/definition.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/html-text.js","webpack://app/../../node_modules/micromark-core-commonmark/lib/block-quote.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n"],"names":["content","tokenizeContent","resolveContent","continuationConstruct","tokenizeContinuation","events","effects","ok","previous","chunkStart","code","chunkInside","contentEnd","contentContinue","nok","self","startLookahead","prefixed","tail","lineEnding","tokenizeLineEnding","start","list","tokenizeListStart","tokenizeListContinuation","tokenizeListEnd","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","indentConstruct","tokenizeIndent","initialSize","size","kind","atMarker","inside","onBlank","endOfPrefix","otherPrefix","notBlank","notInCurrentItem","afterPrefix","headingAtx","tokenizeHeadingAtx","resolveHeadingAtx","context","contentStart","text","before","sequenceOpen","atBreak","sequenceFurther","data","htmlFlow","tokenizeHtmlFlow","resolveToHtmlFlow","blankLineBefore","tokenizeBlankLineBefore","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","index","marker","closingTag","buffer","markerB","open","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","value","continuation","slash","name","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","after","codeIndented","tokenizeCodeIndented","furtherStart","tokenizeFurtherStart","setextUnderline","tokenizeSetextUnderline","resolveToSetextUnderline","definition","heading","paragraph","labelStartLink","tokenizeLabelStartLink","characterEscape","tokenizeCharacterEscape","blankLine","tokenizeBlankLine","labelEnd","tokenizeLabelEnd","resolveToLabelEnd","resolveAllLabelEnd","resourceConstruct","tokenizeResource","referenceFullConstruct","tokenizeReferenceFull","referenceCollapsedConstruct","tokenizeReferenceCollapsed","token","offset","close","media","group","label","labelStart","defined","labelEndNok","labelEndOk","referenceNotFull","resourceStart","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFull","referenceFullAfter","referenceFullMissing","referenceCollapsedStart","referenceCollapsedOpen","hardBreakEscape","tokenizeHardBreakEscape","thematicBreak","tokenizeThematicBreak","sequence","nonLazyContinuation","tokenizeNonLazyContinuation","codeFenced","tokenizeCodeFenced","closeStart","tokenizeCloseStart","initialPrefix","sizeOpen","beforeSequenceOpen","infoBefore","atNonLazyBreak","info","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","startBefore","beforeSequenceClose","sequenceClose","sequenceCloseAfter","lineStart","autolink","tokenizeAutolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","next","characterReference","tokenizeCharacterReference","max","test","numeric","codeText","tokenizeCodeText","resolveCodeText","tailExitIndex","headEnterIndex","enter","between","labelStartImage","tokenizeLabelStartImage","attention","tokenizeAttention","resolveAllAttention","openingSequence","closingSequence","use","nextEvents","end","movePoint","attentionMarkers","point","tokenizeDefinition","titleBefore","tokenizeTitleBefore","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","htmlText","tokenizeHtmlText","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","blockQuote","tokenizeBlockQuoteStart","tokenizeBlockQuoteContinuation","exit","state","contStart","contBefore"],"sourceRoot":""}