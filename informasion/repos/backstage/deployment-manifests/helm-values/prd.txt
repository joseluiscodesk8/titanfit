commonLabels:
  backstage.io/kubernetes-id: backstage
postgresql:
  enabled: true
  auth:
    existingSecret: backstage-psql-creds
backstage:
  podLabels:
    backstage.io/kubernetes-id: backstage
  image:
    repository: pukara-dev/backstage
    tag: latest
    pullSecrets: [github-registry]
  extraEnvVarsSecrets:
    - oauth-creds
    - scaleway-readonly-sa
    - techdocs-bucket-creds
  extraVolumes:
    - name: github-app-creds
      secret:
        secretName: github-app-creds-file
        items:
          - key: pukara-github-credentials.yaml
            path: pukara-github-credentials.yaml
  extraVolumeMounts:
    - name: github-app-creds
      mountPath: '/app/pukara-github-credentials.yaml'
      subPath: pukara-github-credentials.yaml
      readOnly: true
  appConfig:
    app:
      baseUrl: https://backstage.pukara.dev
      title: Pukara Portal
      support:
        url: https://github.com/pukara-dev/backstage/issues # Used by common ErrorPage
        items: # Used by common SupportButton component
          - title: Platform Chatroom
            icon: chat
            links:
              - url: https://pukara.slack.com/archives/C04AKF5NRR8
                title: '#platform'
  proxy:
    endpoints:
      /opencost: http://opencost.monitoring.svc.cluster.local:9091/model
  opencost:
    baseUrl: https://backstage.pukara.dev/api/proxy/opencost
  '/argocd/api':
    target: https://argocd-internal.pukara.dev/api/v1/
    changeOrigin: true
    secure: false
    headers:
      Cookie:
        $env: ${ARGOCD_AUTH_TOKEN}
    organization:
      name: Pukara
    backend:
      baseUrl: https://backstage.pukara.dev
      # config options: https://node-postgres.com/api/client
      reading:
        allow:
          - host: '*.pukara.dev'
          - host: '*.bonito-stonecat.ts.net'
      database:
        client: pg
        connection:
          host: ${POSTGRES_HOST}
          port: ${POSTGRES_PORT}
          user: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
      csp:
        connect-src: ["'self'", 'http:', 'https:']
        img-src:
          [
            "'self'",
            'data:',
            'https://avatars.githubusercontent.com',
            'https://avatars.slac',
            'https://i.ibb.co'
          ]
    integrations:
      github:
        - host: github.com
          apps:
            - $include: pukara-github-credentials.yaml
    scaffolder:
      defaultAuthor:
        name: Pukara Scaffolder
        email: platform@pukara.dev
    techdocs:
      builder: 'external'
      generator:
        runIn: 'local'
      publisher:
        type: 'awsS3'
        awsS3:
          bucketName: 'pukara-backstage-techdocs'
          accountId: '663221468720'
          region: 'us-west-2'
    aws:
      accounts:
        - accountId: '663221468720'
          accessKeyId: ${AWS_ACCESS_KEY_ID}
          secretAccessKey: ${AWS_SECRET_ACCESS_KEY}
    auth:
      environment: production
      providers:
        github:
          production:
            clientId: ${AUTH_GITHUB_CLIENT_ID}
            clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
            signIn:
              resolvers:
                # Matches the GitHub username with the Backstage user entity name.
                # See https://backstage.io/docs/auth/github/provider#resolvers for more resolvers.
                - resolver: usernameMatchingUserEntityName
    catalog:
      locations:
        - type: file
          # Check why ./ from https://backstage.io/docs/features/software-catalog/configuration#local-file-type-file-configurations
          target: ./examples/org.yaml
          rules:
            - allow: [User, Group]
      orphanStrategy: delete
      rules:
        - allow: [Component, System, API, Resource, Location, Domain, Template]
      providers:
        githubOrg:
          id: production
          githubUrl: https://github.com
          orgs: ['pukara-dev']
          schedule:
            initialDelay: { seconds: 30 }
            frequency: { hours: 1 }
            timeout: { minutes: 50 }
        github:
          # the provider ID can be any camelCase string
          pukara:
            organization: 'pukara-dev' # string
            catalogPath: '/catalog-info.yaml' # string
            filters:
              branch: 'main' # string
              repository: '.*' # Regex
            schedule: # same options as in TaskScheduleDefinition
              # supports cron, ISO duration, "human duration" as used in code
              frequency: { minutes: 30 }
              # supports ISO duration, "human duration" as used in code
              timeout: { minutes: 3 }
          templateProvider:
            organization: 'pukara-dev' # string
            catalogPath: '/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'backstage' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 30 }
              timeout: { minutes: 3 }
    kubernetes:
      serviceLocatorMethod:
        type: 'multiTenant'
      clusterLocatorMethods:
        - type: 'config'
          clusters:
            - url: https://ece44c08-b328-4d91-8214-a5fbc480677a.api.k8s.fr-par.scw.cloud:6443
              name: scaleway
              authProvider: 'serviceAccount'
              skipTLSVerify: false
              skipMetricsLookup: false
              serviceAccountToken: ${SCALEWAY_K8S_SERVICE_ACCOUNT_TOKEN}
              caData: ${SCALEWAY_K8S_CA_DATA}
    slack:
      webhookUrl: ${SLACK_WEBHOOK_URL}
